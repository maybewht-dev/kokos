from aiogram import types
from dispatcher import dp
from aiogram.types import InputFile, ContentType, Message, ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.types.callback_query import CallbackQuery
import sqlite3

@dp.message_handler(commands=['bad_words'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            bw = el[0]
        if bw == 'NO':
            turn = InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data='turnonbadwords')
            floor = InlineKeyboardMarkup().add(turn)
            await message.answer("ü§¨ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞: <b>‚ùé –û—Ç–∫–ª—é—á–µ–Ω–æ</b>", parse_mode="HTML", reply_markup=floor)
        else:
            turn = InlineKeyboardButton("‚ùé –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='turnoffbadwords')
            floor = InlineKeyboardMarkup().add(turn)
            await message.answer("ü§¨ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞: <b>‚úÖ –í–∫–ª—é—á–µ–Ω–æ</b>", parse_mode="HTML", reply_markup=floor)
    except:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute("INSERT INTO chat_data VALUES (?, ?, ?, ?, ?)",
                  (message.chat.id, '<b>- {–∏–º—è} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!</b>', '', '1', 'NO'))
        db.commit()
        db.close()

@dp.callback_query_handler(text=['turnonbadwords'])
async def turn_on_bad_words(call: types.CallbackQuery):
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"UPDATE chat_data SET chat_bad_words = 'YES' WHERE chat_id = {call.message.chat.id}")
        db.commit()
        db.close()
        turn = InlineKeyboardButton("‚ùé–≤—ã–∫–ª—é—á–∏—Ç—å", callback_data='turnoffbadwords')
        floor = InlineKeyboardMarkup().add(turn)
        await call.message.edit_text("ü§¨ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞: <b>‚úÖ –≤–∫–ª—é—á–µ–Ω–æ</b>", parse_mode="HTML", reply_markup=floor)

@dp.callback_query_handler(text=['turnoffbadwords'])
async def turn_on_bad_words(call: types.CallbackQuery):
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"UPDATE chat_data SET chat_bad_words = 'NO' WHERE chat_id = {call.message.chat.id}")
        db.commit()
        db.close()
        turn = InlineKeyboardButton("‚úÖ –≤–∫–ª—é—á–∏—Ç—å", callback_data='turnonbadwords')
        floor = InlineKeyboardMarkup().add(turn)
        await call.message.edit_text("ü§¨ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞: <b>‚ùé–æ—Ç–∫–ª—é—á–µ–Ω–æ</b>", parse_mode="HTML", reply_markup=floor)



@dp.message_handler(text=['–ò–¥–∏ –Ω–∞—Ö—É–π', '–ò–¥–∏ –Ωa—Ö—É–π', '–ò–¥–∏ –Ω–∞x—É–π', '–ò–¥–∏ –Ω–∞—Öy–π', '–ò–¥–∏ –Ωax—É–π', '–ò–¥–∏ –Ωa—Öy–π', '–ò–¥–∏ –Ωaxy–π', '–ò–¥–∏ –Ω–∞xy–π', '–ò–¥–∏ –Ω–∞—Ö—Ü–π', '–∏–¥–∏ –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ωa—Ö—É–π', '–∏–¥–∏ –Ω–∞x—É–π', '–∏–¥–∏ –Ω–∞—Öy–π', '–∏–¥–∏ –Ωax—É–π', '–∏–¥–∏ –Ωa—Öy–π', '–∏–¥–∏ –Ω–∞xy–π', '–∏–¥–∏ –Ωaxy–π', '–∏–¥–∏ –Ω–∞—Ö—Ü–π'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer("–Ω–µ—Ç")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–°—Ç—Ä–µ–ª–æ—á–Ω–∏–∫', '—Å—Ç—Ä–µ–ª–æ—á–Ω–∏–∫'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer("–Ω–µ–∞")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–°–ª–∏—Ç—ã–π –±–æ—Ç', '—Å–ª–∏—Ç—ã–π –±–æ—Ç'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer("–µ—Å—Ç—å —Ç–∞–∫–æ–µ")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–•—É–µ—Å–æ—Å', '—Ö—É–µ—Å–æ—Å'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer("–æ—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥–∏ —á–∞—Ç–∞ –≤–∞—à–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è–º")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–ü–∏–¥–æ—Ä', '–ø–∏–¥–æ—Ä'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer("–µ—Å–ª–∏ —ç—Ç–æ –µ–≤–∞ —Å–∫–∞–∂–∏—Ç–µ –ø—É—Å–∫–∞–π –Ω–µ –±–∞–ª—É–µ—Ç")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–ë–æ—Ç –≥–æ–≤–Ω–æ', '–∫–æ–∫–æ—Å –≥–æ–≤–Ω–æ', '–±–æ—Ç –≥–æ–≤–Ω–æ', '–ö–æ–∫–æ—Å –≥–æ–≤–Ω–æ', '–ë–æ—Ç —Ö—É–π–Ω—è', '–ö–æ–∫–æ—Å —Ö—É–π–Ω—è', '–±–æ—Ç —Ö—É–π–Ω—è', '–∫–æ–∫–æ—Å —Ö—É–π–Ω—è'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer("–∫–∞–∫ —Ç–∞–∫")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–ß–º–æ', '–ß–º–æ—à–Ω–∏–∫', '—á–º–æ', '—á–º–æ—à–Ω–∏–∫'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer(f'"–Ω–µ—Ç" - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>', parse_mode="HTML")
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–ü–∏–∑–¥–∞', '–ø–∏–∑–¥–∞', '–ü–∏–∑', '–ø–∏–∑'])
async def process_giveeclairs_command(message: types.Message):
    try:
        db = sqlite3.connect('chapcha_data_base.db')
        c = db.cursor()
        c.execute(f"SELECT chat_bad_words FROM chat_data WHERE chat_id = {message.chat.id}")
        items = c.fetchall()
        for el in items:
            allow_bad_words = el[0]
        if allow_bad_words == 'YES':
            await message.answer(f'–ø–æ–ø–∞')
        db.commit()
        db.close()
    except:
        pass

@dp.message_handler(text=['–ó–∞–µ–±–∞–ª', '–∑–∞–µ–±–∞–ª'])
async def process_giveeclairs_command(message: types.Message):
    await message.answer("–∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã?")

@dp.message_handler(text=['–∫–æ–∫–æ—Å —É—Ä—ã–ª', '–∫–æ–∫–æ—Å —É—Ä–∏–ª', '–ö–æ–∫–æ—Å —É—Ä—ã–ª', '–ö–æ–∫–æ—Å —É—Ä–∏–ª'])
async def process_giveeclairs_command(message: types.Message):
    await message.answer("–¥–∞, —è —Ç–∞–∫–æ–π")

@dp.message_handler(text=['–£—Ä—ã–ª', '–£—Ä–∏–ª', '—É—Ä—ã–ª', '—É—Ä–∏–ª'])
async def process_giveeclairs_command(message: types.Message):
    await message.answer("–µ—â–µ –∫–∞–∫")